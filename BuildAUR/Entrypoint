#!/usr/bin/bash

set +H
set -e

ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
date

pacman -Syu git --noconfirm

packages=()
repos=()
prepare_packages=()
needs_helper=()
fake_depend=()
declare -A prepare_map=()

source ./BuildAUR/Packages

sudo="sudo --set-home -u builder"
sy="$sudo yay -S --noconfirm --builddir=./build"

# 初始配置

useradd builder -m
echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
chmod -R a+rw .

cat << EOM >> /etc/pacman.conf
[archlinuxcn]
Server = https://repo.archlinuxcn.org/x86_64
EOM

pacman-key --init
pacman-key --lsign-key "farseerfc@archlinux.org"
pacman -Sy --noconfirm && pacman -S --noconfirm archlinuxcn-keyring
pacman -Syu --noconfirm archlinux-keyring
pacman -Syu --noconfirm yay

# 查找 /etc/makepkg.conf 并去除 debug 选项
# https://github.com/Neboer/archlinuxus/blob/main/prepare-arch-env/prepare-makepkg.sh

file="/etc/makepkg.conf"
eval "$(grep '^OPTIONS=' "$file")"
has_debug=0; has_negated_debug=0
for i in "${!OPTIONS[@]}"
do case "${OPTIONS[i]}" in
    "debug") OPTIONS[i]="!debug"; has_debug=1;;
    "!debug") has_negated_debug=1;;
esac done
if [[ $has_debug -eq 0 && $has_negated_debug -eq 0 ]]
then OPTIONS+=("!debug"); fi
new_line="OPTIONS=(${OPTIONS[@]})"
sed -i.bak "/^OPTIONS=/c$new_line" "$file"

# 安装准备包
echo :: "Installing prepare packages"
cd ./BuildAUR
cd depend-solver
chown -R builder:builder .
IFS=$'\n' echo -n "${fake_depend[*]}" > pkgs.txt
$sudo makepkg -si --noconfirm
cd ..
[[ -n "$prepare_packages" ]] && $sy "${prepare_packages[@]}"
cd ..

# 克隆 AUR
echo :: "Cloning AUR packages"
cd ./BuildFiles
chmod a+rwx .
for pkg in "${packages[@]}"; do
    $sudo yay -G "$pkg" --noconfirm
done
cd ..

# 克隆仓库
echo :: "Cloning repositories"
cd ./BuildFiles
for repo in "${repos[@]}"; do
    $sudo git clone "${repo}"
done
cd ..

# 安装自定义包
echo :: "Building custom packages"
mkdir ./pkgs
cd ./BuildFiles
chown -R builder:builder .
for dir in *
do if [[ -d "$dir" ]] && [[ -f "$dir/PKGBUILD" ]]
then cd "$dir"
    echo :::: "Building $dir"
    prepare_packages=()
    [[ -f "PrepareAction" ]] && source "PrepareAction"
    [[ -n "$prepare_packages" ]] && $sy "${prepare_packages[@]}"
    [[ -n "${prepare_map[$dir]}" ]] && $sy "${prepare_map[$dir]}"

    for pkg in "${needs_helper[@]}"; do
        if [[ "$pkg" == "$dir" ]]
        then match=1; break; fi
    done
    if [[ -n "$match" ]]
        then yay -Bi . --noconfirm
        else makepkg -s --noconfirm
    fi
    mv ./*.pkg.tar.zst ../../pkgs
cd ..; fi done

cd ..
